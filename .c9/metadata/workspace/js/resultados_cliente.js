{"filter":false,"title":"resultados_cliente.js","tooltip":"/js/resultados_cliente.js","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":75,"column":3},"action":"remove","lines":["var geocoder;","var map;","var infowindow;","","function initialize() {","  // Setup the map","  geocoder = new google.maps.Geocoder();","","  var latlng = new google.maps.LatLng(-34.397, 150.644);","","  var mapOptions = {","    zoom: 5,","    center: latlng","  }","","  // Create the map","  map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);","","  // Get the data and set the marker bounds","  var markersLocations = $('#map-canvas').data('locations'),","      markerBounds = new google.maps.LatLngBounds();","","  // Loop through the data getting the address","  $.each(markersLocations,function(index,Element,contentString){","    geocoder.geocode( { 'address': Element.address}, function(results, status) {","","      var contentString = '<div class=\"noscrollbar\"><h3>' + Element.cafe + '</h3><p>' + Element.address + '<br><a href=\"http://www.' + Element.web + '\">' + Element.web +'</a></p></div>';","","      if (status == google.maps.GeocoderStatus.OK) {","        map.setCenter(results[0].geometry.location);","        // Add the markers","        marker = new google.maps.Marker({","            map: map,","            position: results[0].geometry.location,","            icon: 'http://maps.google.com/mapfiles/ms/icons/pink-dot.png'","        });","","        if (Element.home) {","          // Change the marker of a specific marker","          marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png');","          // Open the home info mark straight away ","          infowindow = new google.maps.InfoWindow({","            content: contentString","          });","          infowindow.open(map, marker);","        }","        // Use the results to set the bounds","        markerBounds.extend(results[0].geometry.location);","        map.fitBounds(markerBounds);","        // Add a info window on click: add the address as the info content","        addInfoWindow(marker,contentString);","      } else {","        alert('Geocode was not successful for the following reason: ' + status);","      }","","    });","  });","}","","// Add a info window on click: add the address as the info content","function addInfoWindow(marker,contentString) {","  // Open only one infowindow on click ","  google.maps.event.addListener(marker, 'click', function () {","      if (!infowindow) {","          infowindow = new google.maps.InfoWindow();","      }","      //Setting content of infowindow","      infowindow.setContent(contentString);","      // Open infowindow","      infowindow.open(map, marker);","  });","}","","$(window).load(function() {","    initialize();","});"],"id":2},{"start":{"row":0,"column":0},"end":{"row":120,"column":93},"action":"insert","lines":["/*"," * Simple Google Maps Route API example for finding the shortest route between a number"," * of interesting places and a current position. Please keep disclaimer with code if"," * you use it so people can find updates."," * Coded by Jason Mayes 2014. http://www.jasonmayes.com"," * Latest version available at: http://codepen.io/jasonmayes/pen/DupCH"," */","","var shortestDistance = function() {","  ","  var directionsDisplay;","  var directionsService = new google.maps.DirectionsService();","  var map;","  var size = 0;","  var currentPosition;","","  // An array of interesting places we want to potentially visit.","  var interestingPlaces = [","    {'title': 'Regents Park', 'latLng': new google.maps.LatLng(51.530686, -0.154753)},","    {'title': 'Hyde Park', 'latLng': new google.maps.LatLng(51.507293, -0.164022)},","    {'title': 'Green Park', 'latLng': new google.maps.LatLng(51.504088, -0.141706)},","    {'title': 'Regents Park', 'latLng': new google.maps.LatLng(51.479185, -0.159903)}","  ];","","  // An array to store results from Google routing API.","  var routeResults = [];","","","  // Call this upon page load to set everything in motion!","  function initialize(currentLat, currentLng) {","    currentPosition = new google.maps.LatLng(currentLat, currentLng);","    directionsDisplay = new google.maps.DirectionsRenderer();","    var mapOptions = {","      zoom: 13,","      center: currentPosition","    };","    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);","    directionsDisplay.setMap(map);","","    var marker = new google.maps.Marker({","          position: currentPosition,","          map: map,","          title: 'Currrently location.'","    });","","    var i = interestingPlaces.length;","     while (i--) {","      interestingPlaces[i].marker = new google.maps.Marker({","        position: interestingPlaces[i].latLng,","        map: map,","        title: interestingPlaces[i].title,","        icon: 'http://maps.google.com/mapfiles/ms/icons/green.png'","      });","    }","","    findNearestPlace();","  }","","","  // Loops through all inteesting places to calculate route between our current position","  // and that place.","  function findNearestPlace() {","    var i = interestingPlaces.length;","    size = interestingPlaces.length;","    routeResults = [];","    while (i--) {","      calcRoute(interestingPlaces[i].latLng, storeResult);","    }","  }","","","  // A function to calculate the route between our current position and some desired end point.","  function calcRoute(end, callback) {","    var request = {","        origin: currentPosition,","        destination: end,","        travelMode: google.maps.TravelMode.DRIVING","    };","    directionsService.route(request, function(response, status) {","      if (status == google.maps.DirectionsStatus.OK) {","        callback(response);","      } else {","        size--;","      }","    });","  }","","","  // Stores a routing result from the API in our global array for routes.","  function storeResult(data) {","    routeResults.push(data);","    if (routeResults.length === size) {","      findShortest();","    }","  }","","","  // Goes through all routes stored and finds which one is the shortest. It then","  // sets the shortest route on the map for the user to see.","  function findShortest() {","    var i = routeResults.length;","    var shortestIndex = 0;","    var shortestLength = routeResults[0].routes[0].legs[0].distance.value;","","    while (i--) {","      if (routeResults[i].routes[0].legs[0].distance.value < shortestLength) {","        shortestIndex = i;","        shortestLength = routeResults[i].routes[0].legs[0].distance.value;","      }","    }","    directionsDisplay.setDirections(routeResults[shortestIndex]);","  }","","  // Expose the initialize function publicly as \"init\".","  return {","    init: initialize","  };","}();","","// Upon page load, lets start the process!","google.maps.event.addDomListener(window, 'load', shortestDistance.init(51.489554, -0.12969));"]}],[{"start":{"row":0,"column":0},"end":{"row":120,"column":93},"action":"remove","lines":["/*"," * Simple Google Maps Route API example for finding the shortest route between a number"," * of interesting places and a current position. Please keep disclaimer with code if"," * you use it so people can find updates."," * Coded by Jason Mayes 2014. http://www.jasonmayes.com"," * Latest version available at: http://codepen.io/jasonmayes/pen/DupCH"," */","","var shortestDistance = function() {","  ","  var directionsDisplay;","  var directionsService = new google.maps.DirectionsService();","  var map;","  var size = 0;","  var currentPosition;","","  // An array of interesting places we want to potentially visit.","  var interestingPlaces = [","    {'title': 'Regents Park', 'latLng': new google.maps.LatLng(51.530686, -0.154753)},","    {'title': 'Hyde Park', 'latLng': new google.maps.LatLng(51.507293, -0.164022)},","    {'title': 'Green Park', 'latLng': new google.maps.LatLng(51.504088, -0.141706)},","    {'title': 'Regents Park', 'latLng': new google.maps.LatLng(51.479185, -0.159903)}","  ];","","  // An array to store results from Google routing API.","  var routeResults = [];","","","  // Call this upon page load to set everything in motion!","  function initialize(currentLat, currentLng) {","    currentPosition = new google.maps.LatLng(currentLat, currentLng);","    directionsDisplay = new google.maps.DirectionsRenderer();","    var mapOptions = {","      zoom: 13,","      center: currentPosition","    };","    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);","    directionsDisplay.setMap(map);","","    var marker = new google.maps.Marker({","          position: currentPosition,","          map: map,","          title: 'Currrently location.'","    });","","    var i = interestingPlaces.length;","     while (i--) {","      interestingPlaces[i].marker = new google.maps.Marker({","        position: interestingPlaces[i].latLng,","        map: map,","        title: interestingPlaces[i].title,","        icon: 'http://maps.google.com/mapfiles/ms/icons/green.png'","      });","    }","","    findNearestPlace();","  }","","","  // Loops through all inteesting places to calculate route between our current position","  // and that place.","  function findNearestPlace() {","    var i = interestingPlaces.length;","    size = interestingPlaces.length;","    routeResults = [];","    while (i--) {","      calcRoute(interestingPlaces[i].latLng, storeResult);","    }","  }","","","  // A function to calculate the route between our current position and some desired end point.","  function calcRoute(end, callback) {","    var request = {","        origin: currentPosition,","        destination: end,","        travelMode: google.maps.TravelMode.DRIVING","    };","    directionsService.route(request, function(response, status) {","      if (status == google.maps.DirectionsStatus.OK) {","        callback(response);","      } else {","        size--;","      }","    });","  }","","","  // Stores a routing result from the API in our global array for routes.","  function storeResult(data) {","    routeResults.push(data);","    if (routeResults.length === size) {","      findShortest();","    }","  }","","","  // Goes through all routes stored and finds which one is the shortest. It then","  // sets the shortest route on the map for the user to see.","  function findShortest() {","    var i = routeResults.length;","    var shortestIndex = 0;","    var shortestLength = routeResults[0].routes[0].legs[0].distance.value;","","    while (i--) {","      if (routeResults[i].routes[0].legs[0].distance.value < shortestLength) {","        shortestIndex = i;","        shortestLength = routeResults[i].routes[0].legs[0].distance.value;","      }","    }","    directionsDisplay.setDirections(routeResults[shortestIndex]);","  }","","  // Expose the initialize function publicly as \"init\".","  return {","    init: initialize","  };","}();","","// Upon page load, lets start the process!","google.maps.event.addDomListener(window, 'load', shortestDistance.init(51.489554, -0.12969));"],"id":3}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1462117482774,"hash":"67452301efcdab8998badcfe10325476c3d2e1f0"}